<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Job Application Assistant Pro</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            background-color: #F8F9FA;
            color: #1F2937;
        }
        .btn-gradient {
            background-image: linear-gradient(to right, #4F46E5, #8B5CF6);
            transition: all 0.3s ease;
        }
        .btn-gradient:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 4px 14px 0 rgba(139, 92, 246, 0.5);
        }
        .btn-gradient:disabled {
            background-image: linear-gradient(to right, #9CA3AF, #BCC4D5);
            cursor: not-allowed;
        }
        .spinner {
            border: 4px solid rgba(255, 255, 255, 0.3);
            border-top: 4px solid white;
            border-radius: 50%;
            width: 1.5rem;
            height: 1.5rem;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 100;
        }
    </style>
</head>
<body class="antialiased p-4 sm:p-8">

    <div id="loading" class="fixed inset-0 bg-gray-100 flex items-center justify-center z-50">
        <div class="flex flex-col items-center">
            <div class="spinner !w-12 !h-12 !border-4 !border-gray-400 !border-t-purple-500"></div>
            <p class="mt-4 text-lg font-medium text-gray-700">Connecting to Firebase...</p>
        </div>
    </div>

    <!-- Payment Modal -->
    <div id="paymentModal" class="modal-overlay hidden">
        <div class="bg-white rounded-3xl p-8 max-w-sm w-full text-center shadow-lg relative">
            <h2 class="text-2xl font-bold mb-4">Trial Ended</h2>
            <p class="text-gray-600 mb-6">Your 7-day free trial has expired. To continue using the AI assistant, please subscribe for a monthly fee of $3.00.</p>
            <button id="payButton" class="btn-gradient text-white font-bold py-3 px-8 rounded-full shadow-lg transition-all duration-300">
                Simulate M-Pesa Payment
            </button>
            <p class="text-xs text-gray-400 mt-4">Note: This is a simulation. A real application would integrate with M-Pesa APIs.</p>
        </div>
    </div>

    <!-- Main Container -->
    <div class="container mx-auto max-w-4xl bg-white rounded-3xl shadow-2xl overflow-hidden p-6 sm:p-10 hidden" id="mainApp">
        
        <!-- Header Section -->
        <header class="text-center mb-8">
            <h1 class="text-3xl sm:text-4xl md:text-5xl font-extrabold text-gray-900 mb-2">
                AI Job Application Assistant Pro
            </h1>
            <p class="text-lg text-gray-500">
                Generate tailored cover letters and analyze skill alignment for your dream job.
            </p>
            <div id="userInfo" class="mt-4 text-xs text-gray-400">
                Logged in as <span id="userIdDisplay">...</span>
            </div>
            <div id="trialInfo" class="mt-2 text-sm font-medium"></div>
        </header>

        <!-- Input Section -->
        <section class="mb-10">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <!-- Resume Input -->
                <div class="flex flex-col">
                    <label for="resumeInput" class="text-lg font-semibold text-gray-700 mb-2">1. Paste Your Resume/CV</label>
                    <textarea id="resumeInput" rows="15" class="w-full p-4 rounded-xl border border-gray-300 focus:outline-none focus:ring-2 focus:ring-indigo-500 resize-none" placeholder="Paste your full resume or CV here."></textarea>
                </div>
                <!-- Job Description Input -->
                <div class="flex flex-col">
                    <label for="jobDescInput" class="text-lg font-semibold text-gray-700 mb-2">2. Paste the Job Description</label>
                    <textarea id="jobDescInput" rows="15" class="w-full p-4 rounded-xl border border-gray-300 focus:outline-none focus:ring-2 focus:ring-indigo-500 resize-none" placeholder="Paste the full job description here."></textarea>
                </div>
            </div>
            
            <!-- Generate Button -->
            <div class="mt-8 text-center">
                <button id="generateBtn" class="btn-gradient text-white font-bold py-3 px-8 rounded-full shadow-lg flex items-center justify-center mx-auto transition-all duration-300" disabled>
                    <span id="btnText">Generate Tailored Application</span>
                    <span id="btnSpinner" class="spinner hidden"></span>
                </button>
            </div>
        </section>

        <!-- Output Section -->
        <section id="outputSection" class="mt-10 hidden">
            <h2 class="text-3xl font-bold text-gray-900 text-center mb-6">Your Tailored Application</h2>
            
            <!-- Cover Letter Output -->
            <div class="bg-gray-100 p-6 rounded-2xl border border-gray-200 mb-8">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-xl font-semibold text-gray-800">AI-Generated Cover Letter</h3>
                    <button id="copyCoverLetterBtn" class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-medium py-2 px-4 rounded-full text-sm transition-colors duration-200">
                        Copy
                    </button>
                </div>
                <div id="coverLetterOutput" class="text-gray-700 whitespace-pre-wrap leading-relaxed"></div>
            </div>

            <!-- Skill Analysis Output -->
            <div class="bg-gray-100 p-6 rounded-2xl border border-gray-200">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-xl font-semibold text-gray-800">Key Skill Alignment</h3>
                    <button id="copySkillsBtn" class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-medium py-2 px-4 rounded-full text-sm transition-colors duration-200">
                        Copy
                    </button>
                </div>
                <div id="skillsOutput" class="text-gray-700 leading-relaxed"></div>
            </div>
        </section>
        
    </div>

    <!-- Firebase SDKs -->
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInWithCustomToken, signInAnonymously, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, doc, getDoc, setDoc, updateDoc } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
        import { setLogLevel } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // Firebase Initialization
        setLogLevel('Debug');
        const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');
        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const db = getFirestore(app);

        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';

        const loadingScreen = document.getElementById('loading');
        const mainApp = document.getElementById('mainApp');
        const userIdDisplay = document.getElementById('userIdDisplay');
        const trialInfo = document.getElementById('trialInfo');
        const paymentModal = document.getElementById('paymentModal');
        const payButton = document.getElementById('payButton');
        const generateBtn = document.getElementById('generateBtn');

        let currentUser = null;

        // Sign in anonymously if no custom token is available
        async function signIn() {
            const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;
            if (initialAuthToken) {
                await signInWithCustomToken(auth, initialAuthToken);
            } else {
                await signInAnonymously(auth);
            }
        }

        // Auth state observer
        onAuthStateChanged(auth, async (user) => {
            if (user) {
                currentUser = user;
                const userId = currentUser.uid;
                userIdDisplay.textContent = userId;
                const userDocRef = doc(db, 'artifacts', appId, 'users', userId, 'profile', 'data');
                const userDoc = await getDoc(userDocRef);

                let userData;
                if (!userDoc.exists()) {
                    userData = {
                        isPremium: false,
                        trialStartDate: new Date()
                    };
                    await setDoc(userDocRef, userData);
                } else {
                    userData = userDoc.data();
                }

                // Check trial status
                const now = new Date();
                
                let trialStartJsDate;
                // Check if trialStartDate is a Firestore Timestamp object and convert it
                if (userData.trialStartDate && typeof userData.trialStartDate.toDate === 'function') {
                    trialStartJsDate = userData.trialStartDate.toDate();
                } else {
                    // Otherwise, assume it's a standard date object that can be used directly
                    trialStartJsDate = new Date(userData.trialStartDate);
                }
                
                const trialEndDate = new Date(trialStartJsDate);
                trialEndDate.setDate(trialEndDate.getDate() + 7);

                if (userData.isPremium) {
                    trialInfo.textContent = 'Status: Premium Subscriber';
                    generateBtn.disabled = false;
                } else if (now > trialEndDate) {
                    trialInfo.textContent = 'Status: Trial Expired';
                    paymentModal.classList.remove('hidden');
                    generateBtn.disabled = true;
                } else {
                    const daysLeft = Math.ceil((trialEndDate - now) / (1000 * 60 * 60 * 24));
                    trialInfo.textContent = `Status: Trial active (${daysLeft} day${daysLeft !== 1 ? 's' : ''} remaining)`;
                    generateBtn.disabled = false;
                }
                
                loading.classList.add('hidden');
                mainApp.classList.remove('hidden');
            } else {
                console.log("No user signed in.");
                signIn();
            }
        });

        payButton.addEventListener('click', async () => {
            const userId = currentUser.uid;
            const userDocRef = doc(db, 'artifacts', appId, 'users', userId, 'profile', 'data');
            await updateDoc(userDocRef, { isPremium: true });
            paymentModal.classList.add('hidden');
            trialInfo.textContent = 'Status: Premium Subscriber';
            generateBtn.disabled = false;
        });

        // Application logic (similar to previous response)
        const resumeInput = document.getElementById('resumeInput');
        const jobDescInput = document.getElementById('jobDescInput');
        const btnText = document.getElementById('btnText');
        const btnSpinner = document.getElementById('btnSpinner');
        const outputSection = document.getElementById('outputSection');
        const coverLetterOutput = document.getElementById('coverLetterOutput');
        const skillsOutput = document.getElementById('skillsOutput');
        const copyCoverLetterBtn = document.getElementById('copyCoverLetterBtn');
        const copySkillsBtn = document.getElementById('copySkillsBtn');

        function showProcessingState(isProcessing) {
            generateBtn.disabled = isProcessing;
            if (isProcessing) {
                btnText.textContent = 'Generating...';
                btnSpinner.classList.remove('hidden');
            } else {
                btnText.textContent = 'Generate Tailored Application';
                btnSpinner.classList.add('hidden');
            }
        }

        generateBtn.addEventListener('click', () => {
            if (!resumeInput.value.trim() || !jobDescInput.value.trim()) {
                console.error('Please fill in both your resume and the job description.');
                return;
            }

            showProcessingState(true);
            outputSection.classList.add('hidden');

            const resumeContent = resumeInput.value;
            const jobDescContent = jobDescInput.value;

            // Simulate AI processing
            setTimeout(() => {
                const generatedCoverLetter = `Dear Hiring Manager,

I am writing to express my enthusiastic interest in the role, as advertised on [Platform]. With a strong background in [Top Skill from Resume] and practical experience in [Another Key Skill], I am confident that my skills and experience align perfectly with the requirements of this position.

My experience in e-commerce management has equipped me with a deep understanding of online retail operations, from inventory management to optimizing customer experience. Furthermore, my proficiency in coding and electronics gives me a unique perspective on technology-driven solutions, allowing me to approach challenges with a strong problem-solving mindset.

I am eager to contribute my technical and business acumen to your team. Thank you for your time and consideration.

Sincerely,
[Your Full Name]`;
                
                const generatedSkillsList = `Based on the job description, here are the key skills and qualifications from your resume that align with the role:\n\n
                - **E-commerce Management:** Proficient in managing online stores, including product listing, inventory management, and utilizing platforms like Shopify/WooCommerce.\n
                - **Coding & Development:** Experienced in Python and JavaScript, able to develop and troubleshoot web applications.\n
                - **Problem-Solving & Troubleshooting:** Proven ability to diagnose and repair electronic devices, demonstrating a hands-on approach to complex technical issues.\n
                - **Technical Expertise:** Strong understanding of circuitry and software integration, directly applicable to a tech-focused role.`;

                coverLetterOutput.textContent = generatedCoverLetter;
                skillsOutput.textContent = generatedSkillsList;
                outputSection.classList.remove('hidden');
                
                showProcessingState(false);
            }, 2000);
        });

        // Copy to clipboard functionality
        function copyToClipboard(textToCopy) {
            const textarea = document.createElement('textarea');
            textarea.value = textToCopy;
            document.body.appendChild(textarea);
            textarea.select();
            document.execCommand('copy');
            document.body.removeChild(textarea);
        }

        copyCoverLetterBtn.addEventListener('click', () => {
            copyToClipboard(coverLetterOutput.textContent);
            copyCoverLetterBtn.textContent = 'Copied!';
            setTimeout(() => {
                copyCoverLetterBtn.textContent = 'Copy';
            }, 2000);
        });

        copySkillsBtn.addEventListener('click', () => {
            copyToClipboard(skillsOutput.textContent);
            copySkillsBtn.textContent = 'Copied!';
            setTimeout(() => {
                copySkillsBtn.textContent = 'Copy';
            }, 2000);
        });
    </script>
</body>
</html>
